# Generated by Django 5.2.6 on 2025-09-28 14:15

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="RecommendationEngine",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "algorithm_type",
                    models.CharField(
                        choices=[
                            ("collaborative", "Collaborative Filtering"),
                            ("content_based", "Content-Based"),
                            ("hybrid", "Hybrid"),
                            ("popularity", "Popularity-Based"),
                            ("genre_based", "Genre-Based"),
                        ],
                        default="hybrid",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "weight",
                    models.FloatField(
                        default=1.0, help_text="Weight for hybrid recommendations"
                    ),
                ),
                ("parameters", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-weight", "name"],
            },
        ),
        migrations.CreateModel(
            name="MovieSimilarity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("movie1_id", models.IntegerField(help_text="TMDb movie ID")),
                ("movie2_id", models.IntegerField(help_text="TMDb movie ID")),
                (
                    "similarity_score",
                    models.FloatField(help_text="Similarity score between 0 and 1"),
                ),
                (
                    "algorithm",
                    models.CharField(
                        choices=[
                            ("cosine", "Cosine Similarity"),
                            ("genre", "Genre Similarity"),
                            ("cast", "Cast Similarity"),
                            ("director", "Director Similarity"),
                            ("combined", "Combined Features"),
                        ],
                        default="cosine",
                        max_length=50,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["movie1_id", "similarity_score"],
                        name="recommendat_movie1__32ab4e_idx",
                    ),
                    models.Index(
                        fields=["movie2_id", "similarity_score"],
                        name="recommendat_movie2__a853eb_idx",
                    ),
                    models.Index(
                        fields=["similarity_score"],
                        name="recommendat_similar_86bede_idx",
                    ),
                ],
                "unique_together": {("movie1_id", "movie2_id", "algorithm")},
            },
        ),
        migrations.CreateModel(
            name="RecommendationCache",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "cache_key",
                    models.CharField(help_text="Unique cache key", max_length=255),
                ),
                ("recommendation_type", models.CharField(max_length=50)),
                (
                    "recommendations",
                    models.JSONField(help_text="Cached recommendation results"),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict, help_text="Parameters used for recommendations"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(help_text="Cache expiration time")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendation_cache",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["user", "recommendation_type"],
                        name="recommendat_user_id_c71f10_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="recommendat_expires_349597_idx"
                    ),
                    models.Index(
                        fields=["cache_key"], name="recommendat_cache_k_6de3a0_idx"
                    ),
                ],
                "unique_together": {("user", "cache_key")},
            },
        ),
        migrations.CreateModel(
            name="RecommendationFeedback",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("movie_id", models.IntegerField(help_text="TMDb movie ID")),
                ("recommendation_type", models.CharField(max_length=50)),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("like", "Like"),
                            ("dislike", "Dislike"),
                            ("not_interested", "Not Interested"),
                            ("already_watched", "Already Watched"),
                            ("irrelevant", "Irrelevant"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        help_text="Original confidence score of the recommendation",
                        null=True,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendation_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "feedback_type"],
                        name="recommendat_user_id_0c6bf1_idx",
                    ),
                    models.Index(
                        fields=["movie_id", "feedback_type"],
                        name="recommendat_movie_i_0c98e0_idx",
                    ),
                    models.Index(
                        fields=["recommendation_type"],
                        name="recommendat_recomme_9e27ea_idx",
                    ),
                ],
                "unique_together": {("user", "movie_id", "recommendation_type")},
            },
        ),
        migrations.CreateModel(
            name="UserInteraction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("movie_id", models.IntegerField(help_text="TMDb movie ID")),
                (
                    "interaction_type",
                    models.CharField(
                        choices=[
                            ("view", "View"),
                            ("like", "Like"),
                            ("dislike", "Dislike"),
                            ("favorite", "Favorite"),
                            ("unfavorite", "Unfavorite"),
                            ("rating", "Rating"),
                            ("search", "Search"),
                            ("click", "Click"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "value",
                    models.FloatField(
                        blank=True,
                        help_text="Interaction value (e.g., rating score, duration)",
                        null=True,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "movie_id"],
                        name="recommendat_user_id_1ef758_idx",
                    ),
                    models.Index(
                        fields=["user", "interaction_type"],
                        name="recommendat_user_id_ef4939_idx",
                    ),
                    models.Index(
                        fields=["movie_id", "interaction_type"],
                        name="recommendat_movie_i_4f515d_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="recommendat_timesta_eec1c9_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserSimilarity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "similarity_score",
                    models.FloatField(help_text="Similarity score between 0 and 1"),
                ),
                (
                    "algorithm",
                    models.CharField(
                        choices=[
                            ("cosine", "Cosine Similarity"),
                            ("pearson", "Pearson Correlation"),
                            ("jaccard", "Jaccard Similarity"),
                        ],
                        default="cosine",
                        max_length=50,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "user1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="similarity_as_user1",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="similarity_as_user2",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["user1", "similarity_score"],
                        name="recommendat_user1_i_9add72_idx",
                    ),
                    models.Index(
                        fields=["user2", "similarity_score"],
                        name="recommendat_user2_i_15fcb5_idx",
                    ),
                    models.Index(
                        fields=["similarity_score"],
                        name="recommendat_similar_0b98b1_idx",
                    ),
                ],
                "unique_together": {("user1", "user2", "algorithm")},
            },
        ),
    ]
